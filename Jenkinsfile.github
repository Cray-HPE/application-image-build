@Library('csm-shared-library@main') _

def promotionToken = ~"(master|main|develop|lts\\/.*)"
def buildAndPublish = env.TAG_NAME == null && !(env.BRANCH_NAME ==~ promotionToken) ? true : false
def buildGoogle = false
def rebuildBaseImage = buildAndPublish ? true : false

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if ( env.BRANCH_NAME ==~ ~"^PR-\\d+" ) {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

pipeline {

    agent {
        label "metal-gcp-builder-large"
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: "30", artifactDaysToKeepStr: "2"))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        NAME = "cray-application-image-build"
        DESCRIPTION = "Cray Application Node Image Builder"
        IS_STABLE = getBuildIsStable()
        VERSION = setImageVersion(commitHashShort: GIT_COMMIT[0..6])
        ARTIFACTS_DIRECTORY_BASE = "output-sles15-base"
        ARTIFACTS_DIRECTORY_APPLICATION = "output-application"
	NODE_IMAGE_BUILD="vendor/github.com/Cray-HPE/node-image-build"
        ISO_URL = "https://artifactory.algol60.net/artifactory/os-images/SLE-15-SP3-Online-x86_64-GM-Media1.iso"
        IMAGE_REPO = "user-uan-images"
        STABLE_BASE = "https://artifactory.algol60.net/artifactory/user-uan-images/stable"
        NPROC = sh(returnStdout: true, script: "nproc").trim()
        NRAM = '4096'
        PKR_VAR_kernel_version="5.3.18-150300.59.43.1"
    }

    parameters {
        booleanParam(name: 'buildAndPublish', defaultValue: buildAndPublish, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to actually rebuild and publish for a stable merge build job.')
        booleanParam(name: 'rebuildBaseImage', defaultValue: rebuildBaseImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the base image; unchecked will pull latest STABLE base. (This overrides rebuildApplicationImage; if this is true, rebuildApplicationImage is bypassed.)')
        booleanParam(name: 'buildGoogle', defaultValue: buildGoogle, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build Google images for vshasta.)')
        booleanParam(name: 'rebuildApplicationImage', defaultValue: rebuildBaseImage, description: '(leave unchecked for; git-tags, main, and develop) Whether or not to build the application image; unchecked will pull latest STABLE application.')
        string(name: 'sourceProjectId', defaultValue: "artifactory-202004", description: 'The source Project ID for pulling Google images.')
    }

    triggers {
        parameterizedCron(env.BRANCH_NAME == 'main' ? '''
            # 6am UTC / midnight CT
            0 6 * * * %buildAndPublish=true; rebuildBaseImage=true; buildGoogle=true; rebuildApplicationImage=true
        ''' : '')
    }

    stages {

        stage('Fetch SLES ISO') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
                expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildApplicationImage) }
            }
            steps {
                dir('iso') {
                    withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                    ]) {
                        sh "curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O ${ISO_URL}"
                    }
                }
            }
        }
        stage('Process template files') {
            when {
                expression { env.TAG_NAME == null && (!(env.BRANCH_NAME ==~ promotionToken) || (env.BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
                    string(credentialsId: 'sles15-registration-code', variable: 'SLES15_REGISTRATION_CODE')
                ]) {
                    sh '''
                        ./scripts/setup.sh
                    '''
                }
            }
        }
        stage("Build base") {
		when {
			expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
			expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildApplicationImage) }
		}
		steps {
			withCredentials([
				string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD')
			]) {
				script {
					def arguments = "-only=qemu.sles15-base -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
					publishCsmImages.build(arguments, '${NODE_IMAGE_BUILD}/boxes/sles15-base/')
				}
			}
		}
        }
	stage('Upload Base to Artifactory') {
		when {
			expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
			expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildApplicationImage) }
		}
		steps {
			script {
				def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${ISO_URL}"
				publishCsmImages(artifactoryRepo: IMAGE_REPO, pattern: ARTIFACTS_DIRECTORY_BASE, imageName: 'sles15-base', version: env.VERSION, props: props)
			}
		}
	}
        stage("Build Application and upload GCP Base") {
        	parallel {
			stage('Upload Base to Google') {
				when {
					expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
					expression { params.rebuildBaseImage || (params.rebuildBaseImage && ! params.rebuildApplicationImage) }
					expression { params.buildGoogle }
				}
				steps {
					withCredentials([
						file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
					]) {
						script {
							sh "./scripts/google/import.sh"
						}
					}
				}
			}
			stage('QEMU Application') {
				when {
					expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
					expression { params.rebuildApplicationImage }
				}
				steps {
					withCredentials([
						string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
						usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
					]) {
						script {
							// If we didn't rebuild in this build, then always grab latest stable base.
							def source = params.rebuildBaseImage ? "${ARTIFACTS_DIRECTORY_BASE}/sles15-base-${VERSION}.qcow2" : "${STABLE_BASE}/sles15-base/[RELEASE]/sles15-base-[RELEASE].qcow2"
							def arguments = "-only=qemu.application -var 'source_iso_uri='${source} -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'cpus=${NPROC}' -var 'memory=${NRAM}' -var 'artifact_version=${VERSION}'"
							publishCsmImages.build(arguments, 'boxes/application/')
							publishCsmImages.prepareArtifacts(ARTIFACTS_DIRECTORY_APPLICATION, VERSION)
							def props = "build.number=${env.VERSION};build.url=${env.BUILD_URL};vcs.revision-short=${GIT_COMMIT[0..6]};build.source-artifact=${source}"
							publishCsmImages(artifactoryRepo: IMAGE_REPO, pattern: ARTIFACTS_DIRECTORY_APPLICATION, imageName: 'application', version: env.VERSION, props: props)
						}
					}
				}
			}
		}
	}
	stage("Build GCP Application") {
		when {
			expression { env.TAG_NAME == null && (!(BRANCH_NAME ==~ promotionToken) || (BRANCH_NAME ==~ promotionToken && params.buildAndPublish)) }
			expression { params.rebuildApplicationImage }
			expression { params.buildGoogle }
		}
		steps {
			withCredentials([
				string(credentialsId: 'sles15-initial-root-password', variable: 'SLES15_INITIAL_ROOT_PASSWORD'),
				usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN'),
				file(credentialsId: 'google-image-manager', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),
				file(credentialsId: 'google-image-manager', variable: 'GOOGLE_CLOUD_SA_KEY')
			]) {
				script {
					// Did we build base? If YES, just use the RC image we built. If NO then use the latest non-RC
					def googleSourceArtifact = params.rebuildBaseImage ? "vshasta-sles15-base-${VERSION}" : ""
					if (googleSourceArtifact == "") {
						googleSourceArtifact = getGoogleCloudSourceArtifact(
							googleCloudSaKey: env.GOOGLE_CLOUD_SA_KEY,
							googleCloudProject: params.sourceProjectId,
							googleCloudFamily: 'vshasta-sles15-base',
							fullUrl: false
						)
					}

					def googleArguments = "-only=googlecompute.application -var 'google_source_image_name=${googleSourceArtifact}' -var 'ssh_password=${SLES15_INITIAL_ROOT_PASSWORD}' -var 'artifactory_user=${ARTIFACTORY_USER}' -var 'artifactory_token=${ARTIFACTORY_TOKEN}' -var 'artifact_version=${VERSION}'"
					publishCsmImages.build(googleArguments, 'boxes/application/')
				}
			}
		}
        }
        // This should run stand-alone; nothing should build when we release, we're just moving things within artifactory.
        stage('Release') {
            when { tag "*" }
            steps {
                withCredentials([
                        usernamePassword(credentialsId: 'artifactory-algol60', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')
                ]) {
                    script {
                        publishCsmImages.release('sles15-base', GIT_COMMIT[0..6], env.TAG_NAME)
                        publishCsmImages.release('application', GIT_COMMIT[0..6], env.TAG_NAME)
                    }
                }
            }
        }
    }
}
